package fptree;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class FPTree {

	private int minSuport;

	public int getMinSuport() {
		return minSuport;
	}

	public void print(String S) {
		System.out.print(S);
	}

	public void setMinSuport(int minSuport) {
		this.minSuport = minSuport;
	}

	// 从若干个文件中读入Transaction Record
	public List<List<String>> readTransRocords(String... filenames) {
		List<List<String>> transaction = null;
		if (filenames.length > 0) {
			transaction = new LinkedList<List<String>>();
			for (String filename : filenames) {
				try {
					FileReader fr = new FileReader(filename);
					BufferedReader br = new BufferedReader(fr);
					try {
						String line;
						List<String> record;
						while ((line = br.readLine()) != null) {
							if (line.trim().length() > 0) {
								String str[] = line.split(",");
								record = new LinkedList<String>();
								for (String w : str)
									record.add(w);
								transaction.add(record);
							}
						}
					} finally {
						br.close();
					}
				} catch (IOException ex) {
					System.out.println("Read transaction records failed."
							+ ex.getMessage());
					System.exit(1);
				}
			}
		}
		return transaction;
	}

	// FP-Growth算法
	
	/* transRecords为数据源
	 * items字典存放每件商品累计件数
	 * len为有效订单数，方便计算支持度等
	 * d为支持度约束
	 * date为数据处理当天
	 * isdatabase判断是否是从远程数据库查找商品标题
	 * 
	 * */
	public void FPGrowth(List<List<String>> transRecords, int len,
			Map<String, Integer> items, List<String> postPattern, double d,
			String storeName, Date date,int isdatabase) throws SQLException {
		// 构建项头表，同时也是频繁1项集
		ArrayList<TreeNode> HeaderTable = buildHeaderTable(transRecords);
		// 构建FP-Tree
		TreeNode treeRoot = buildFPTree(transRecords, HeaderTable);
		// 如果FP-Tree为空则返回
		if (treeRoot.getChildren() == null
				|| treeRoot.getChildren().size() == 0)
			return;
		// 输出项头表的每一项+postPattern
		if (postPattern != null) {
			if (postPattern.size() == 1) {
				for (TreeNode header : HeaderTable) {
					String left = header.getName();
					int all = header.getCount();
					String right = postPattern.get(0);
					int leftno = items.get(left);
					int rightno = items.get(right);
					double support = (double) all / len;
					if (support < d) {
						continue;
					}
					double confidentlr = (double) all / leftno;
					double confidentrl = (double) all / rightno;
					double rise = support
							/ (((double) leftno / len) * ((double) rightno / len));
					String l="",r="";
					if(isdatabase==0){
						l = finditem(left);
						r = finditem(right);}
					else{
						l = finditemfromdatabase(left);
						r = finditemfromdatabase(right);
					}
					insertresult(l, r, support, confidentlr, rise, storeName,
							date, leftno, rightno, all, left, right);
					insertresult(r, l, support, confidentrl, rise, storeName,
							date, rightno, leftno, all, right, left);
					print(left + "==>" + right + "\t" + support + "\t"
							+ confidentlr + "\t" + rise + "\n");
					System.out.println();
					print(right + "==>" + left + "\t" + support + "\t"
							+ confidentrl + "\t" + rise + "\n");
					System.out.println();
				}
			} else {
				return;
			}
		} else {
			for (TreeNode header : HeaderTable) {
				items.put(header.getName(), header.getCount());
				// System.out.print(header.getCount() + "\t" + header.getName()
				// + "\n");
			}
			// System.out.println("---------------");
		}
		// 找到项头表的每一项的条件模式基，进入递归迭代
		for (TreeNode header : HeaderTable) {
			// 后缀模式增加一项
			List<String> newPostPattern = new LinkedList<String>();
			newPostPattern.add(header.getName());
			if (postPattern != null)
				newPostPattern.addAll(postPattern);
			// 寻找header的条件模式基CPB，放入newTransRecords中
			List<List<String>> newTransRecords = new LinkedList<List<String>>();
			TreeNode backnode = header.getNextHomonym();
			while (backnode != null) {
				int counter = backnode.getCount();
				List<String> prenodes = new ArrayList<String>();
				TreeNode parent = backnode;
				// 遍历backnode的祖先节点，放到prenodes中
				while ((parent = parent.getParent()).getName() != null) {
					prenodes.add(parent.getName());
				}
				while (counter-- > 0) {
					newTransRecords.add(prenodes);
				}
				backnode = backnode.getNextHomonym();
			}
			// 递归迭代
			FPGrowth(newTransRecords, len, items, newPostPattern, d, storeName,
					date,isdatabase);
		}
	}

	// 构建项头表，同时也是频繁1项集
	public ArrayList<TreeNode> buildHeaderTable(List<List<String>> transRecords) {
		ArrayList<TreeNode> F1 = null;
		if (transRecords.size() > 0) {
			F1 = new ArrayList<TreeNode>();
			Map<String, TreeNode> map = new HashMap<String, TreeNode>();
			// 计算事务数据库中各项的支持度
			for (List<String> record : transRecords) {
				for (String item : record) {
					if (!map.keySet().contains(item)) {
						TreeNode node = new TreeNode(item);
						node.setCount(1);
						map.put(item, node);
					} else {
						map.get(item).countIncrement(1);
					}
				}
			}
			// 把支持度大于（或等于）minSup的项加入到F1中
			Set<String> names = map.keySet();
			for (String name : names) {
				TreeNode tnode = map.get(name);
				if (tnode.getCount() >= minSuport) {
					F1.add(tnode);
				}
			}
			Collections.sort(F1);
			return F1;
		} else {
			return null;
		}
	}

	// 构建FP-Tree
	public TreeNode buildFPTree(List<List<String>> transRecords,
			ArrayList<TreeNode> F1) {
		TreeNode root = new TreeNode(); // 创建树的根节点
		for (List<String> transRecord : transRecords) {
			LinkedList<String> record = sortByF1(transRecord, F1);
			TreeNode subTreeRoot = root;
			TreeNode tmpRoot = null;
			if (root.getChildren() != null) {
				while (!record.isEmpty()
						&& (tmpRoot = subTreeRoot.findChild(record.peek())) != null) {
					tmpRoot.countIncrement(1);
					subTreeRoot = tmpRoot;
					record.poll();
				}
			}
			addNodes(subTreeRoot, record, F1);
		}
		return root;
	}

	// 把交易记录按项的频繁程序降序排列
	public LinkedList<String> sortByF1(List<String> transRecord,
			ArrayList<TreeNode> F1) {
		Map<String, Integer> map = new HashMap<String, Integer>();
		for (String item : transRecord) {
			// 由于F1已经是按降序排列的，所以下面那步不需要
			for (int i = 0; i < F1.size(); i++) {
				TreeNode tnode = F1.get(i);
				if (tnode.getName().equals(item)) {
					map.put(item, i);
				}
			}
		}
		ArrayList<Entry<String, Integer>> al = new ArrayList<Entry<String, Integer>>(
				map.entrySet());
		Collections.sort(al, new Comparator<Map.Entry<String, Integer>>() {
			@Override
			public int compare(Entry<String, Integer> arg0,
					Entry<String, Integer> arg1) {
				// 降序排列
				return arg0.getValue() - arg1.getValue();
			}
		});
		LinkedList<String> rest = new LinkedList<String>();
		for (Entry<String, Integer> entry : al) {
			rest.add(entry.getKey());
		}
		return rest;
	}

	// 把record作为ancestor的后代插入树中
	public void addNodes(TreeNode ancestor, LinkedList<String> record,
			ArrayList<TreeNode> F1) {
		if (record.size() > 0) {
			while (record.size() > 0) {
				String item = record.poll();
				TreeNode leafnode = new TreeNode(item);
				leafnode.setCount(1);
				leafnode.setParent(ancestor);
				ancestor.addChild(leafnode);

				for (TreeNode f1 : F1) {
					if (f1.getName().equals(item)) {
						while (f1.getNextHomonym() != null) {
							f1 = f1.getNextHomonym();
						}
						f1.setNextHomonym(leafnode);
						break;
					}
				}

				addNodes(leafnode, record, F1);
			}
		}
	}

	/*
	 * 通过商品编号找到最新的标题
	 */
	public String finditem(String itemno) throws SQLException {
		ResultSet s = null;
		Mysql ss = null;
		try {
			ss = new Mysql();
			String sql = "SELECT distinct title FROM qingmu.tmp_order_detail_for_skx where merchant_sn like '"
					+ itemno + "%' order by import_date desc limit 1;";
			s = ss.exectequery(sql);
			while (s.next()) {
				return s.getString(1);
			}

		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			s.close();
			ss.closeall();
		}
		return null;

	}
	
	/*
	 * 在数据库中通过商品编号找到最新的标题
	 */
	public String finditemfromdatabase(String itemno) throws SQLException {
		ResultSet s = null;
		Mysql ss = null;
		try {
			String url = "jdbc:mysql://192.168.0.26:3306/orders_db?"
					+ "user=fenxi&password=passowrd_for_orders_db&useUnicode=true&characterEncoding=UTF8";
			ss = new Mysql(url);
			String sql = "SELECT distinct title FROM orders_db.t_order_detail_tm where merchant_sn like '"
					+ itemno + "%' order by import_date desc limit 1;";
			s = ss.exectequery(sql);
			while (s.next()) {
				return s.getString(1);
			}

		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			s.close();
			ss.closeall();
		}
		return null;

	}

	public void insertresult(String left, String right, double s, double c,
			double l, String storeName, Date date, int leftno, int rightno,
			int totalno, String leftcode, String rightcode) throws SQLException {
		PreparedStatement p = null;
		Mysql ss = null;
		try {
			ss = new Mysql();
			String sql = "INSERT INTO `linkresult`(`left`,`right`,`support`,`confident`,`lift`,`dates`,`storesname`,`leftno`,`rightno`,`totalno`,`leftcode`,`rightcode`) VALUES(?,?,?,?,?,?,?,?,?,?,?,?)";
			p = ss.conn.prepareStatement(sql);
			p.setString(1, left);
			p.setString(2, right);
			p.setDouble(3, s);
			p.setDouble(4, c);
			p.setDouble(5, l);
			p.setString(7, storeName);
			p.setDate(6, new java.sql.Date(date.getTime()));
			p.setInt(8, leftno);
			p.setInt(9, rightno);
			p.setInt(10, totalno);
			p.setString(11, leftcode);
			p.setString(12, rightcode);
			p.execute();

		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			p.close();
			ss.closeall();
		}
	}

	/*当天只能进行一次数据处理。故删除当天数据*/
	public static void deleteresult(String storeName, Date date)
			throws SQLException {
		PreparedStatement p = null;
		Mysql ss = null;
		try {
			ss = new Mysql();
			String sql = "delete from `linkresult` where storesname=? and dates=?";
			p = ss.conn.prepareStatement(sql);
			p.setString(1, storeName);
			p.setDate(2, new java.sql.Date(date.getTime()));
			p.execute();
		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			p.close();
			ss.closeall();
		}
	}
	
	// 从数据库里读取达芙妮数据，shop_id为店铺id
	public  static List<List<String>> getDataFromMysql(String url,String shop_id) throws SQLException, ClassNotFoundException{
		List<List<String>> transaction;
		transaction = new LinkedList<List<String>>();
		Mysql db=new Mysql(url);
		String selectsql="SELECT group_concat(merchant_sn) as products FROM t_order_detail_tm "
				+ "where order_status=1 and shop_id="+shop_id+" group by order_sn having count(*)>=2";
		ResultSet result = db.exectequery(selectsql);
		while(result.next()){
			List<String> record;
			String line=result.getString(1).trim();
			String str[] = line.split(",");
			record = new LinkedList<String>();
			for (String w : str){
				//如果编号不是16位，那数据是异常数据
				if(w.length()!=16){
					continue;
				}
				//截取前面七位编号即可，即类别之前
				String deal=w.substring(0, 7);
				if(record.contains(deal)==false){
					record.add(deal);
				}
			}
			//购买同一类的话，剔除掉数据
			if(record.size()==1){
				continue;
			}
			for(String i:record){
				System.out.print(i+",");
			}
			System.out.println();
			transaction.add(record);
		}
		db.closeall();
		return transaction;
	}
	
	// 数据源为文件的测试方法
	public static void filetest() {
		long startTime = System.currentTimeMillis(); // 获取开始时间

		Date date = new Date();
		// 店铺名 达芙妮官方旗舰店id1,鞋柜官方旗舰店id31
		//店铺ID
		String shop_id = "1";
		// 店铺订单数据
		String datass = "src/fptree/dafuni.csv";

		/* 以下不用改 */
		try {
			deleteresult(shop_id, date);
		} catch (SQLException e) {
			e.printStackTrace();
			System.out.println("删除出错");
		}
		
		//主要程序
		FPTree fptree = new FPTree();
		fptree.setMinSuport(1);
		List<List<String>> transRecords = fptree.readTransRocords(datass);
		//主要程序介绍
		
		int len = transRecords.size();
		System.out.println("总订单数:"+len + "组合\t支持度\t置信度\t提升度\n");
		Map<String, Integer> items = new HashMap<String, Integer>();
		
		try {
			fptree.FPGrowth(transRecords, len, items, null, 0.001, shop_id,
					date,0);
		} catch (SQLException e) {
			System.out.println("出错");
			e.printStackTrace();
		}
		
		
		long endTime = System.currentTimeMillis(); // 获取结束时间
		System.out.println("程序运行时间： " + (endTime - startTime) / 1000 + "s");
	}
	
	// 数据源为数据库的测试方法
		public static void databasetest(double support) {
			long startTime = System.currentTimeMillis(); // 获取开始时间

			Date date = new Date();
			// 店铺名 达芙妮官方旗舰店id1,鞋柜官方旗舰店id31
			String url = "jdbc:mysql://192.168.0.26:3306/orders_db?"
					+ "user=fenxi&password=passowrd_for_orders_db&useUnicode=true&characterEncoding=UTF8";
			//店铺ID
			String shop_id = "1";
			/* 以下不用改 */
			try {
				deleteresult(shop_id, date);
			} catch (SQLException e) {
				e.printStackTrace();
				System.out.println("删除出错");
			}
			
			//主要程序
			FPTree fptree = new FPTree();
			fptree.setMinSuport(1);
			List<List<String>> transRecords = null;
			try {
				transRecords = getDataFromMysql(url, shop_id);
			} catch (ClassNotFoundException | SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			//主要程序介绍
			
			int len = transRecords.size();
			System.out.println("总订单数:"+len + "组合\t支持度\t置信度\t提升度\n");
			Map<String, Integer> items = new HashMap<String, Integer>();
			
			try {
				fptree.FPGrowth(transRecords, len, items, null, support, shop_id,
						date,1);
			} catch (SQLException e) {
				System.out.println("出错");
				e.printStackTrace();
			}
			
			
			long endTime = System.currentTimeMillis(); // 获取结束时间
			System.out.println("程序运行时间： " + (endTime - startTime) / 1000 + "s");
		}
		
	public static void main(String a[]){
		//filetest();
		double support=0.0001;
		databasetest(support);
	}
}